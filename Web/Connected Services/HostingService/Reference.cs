//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Web.HostingService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Entity", Namespace="http://schemas.datacontract.org/2004/07/HostingManagmentSystem.Domain.Model")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Web.HostingService.Admin))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Web.HostingService.VPS))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Web.HostingService.User))]
    public partial class Entity : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid IdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Admin", Namespace="http://schemas.datacontract.org/2004/07/HostingManagmentSystem.Domain.Model")]
    [System.SerializableAttribute()]
    public partial class Admin : Web.HostingService.Entity {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IpField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Ip {
            get {
                return this.IpField;
            }
            set {
                if ((object.ReferenceEquals(this.IpField, value) != true)) {
                    this.IpField = value;
                    this.RaisePropertyChanged("Ip");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="VPS", Namespace="http://schemas.datacontract.org/2004/07/HostingManagmentSystem.Domain.Model")]
    [System.SerializableAttribute()]
    public partial class VPS : Web.HostingService.Entity {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.Guid> AdminIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CPUField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OperatingSystemField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.Guid> OwnerIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RAMField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.Guid> AdminId {
            get {
                return this.AdminIdField;
            }
            set {
                if ((this.AdminIdField.Equals(value) != true)) {
                    this.AdminIdField = value;
                    this.RaisePropertyChanged("AdminId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CPU {
            get {
                return this.CPUField;
            }
            set {
                if ((object.ReferenceEquals(this.CPUField, value) != true)) {
                    this.CPUField = value;
                    this.RaisePropertyChanged("CPU");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OperatingSystem {
            get {
                return this.OperatingSystemField;
            }
            set {
                if ((object.ReferenceEquals(this.OperatingSystemField, value) != true)) {
                    this.OperatingSystemField = value;
                    this.RaisePropertyChanged("OperatingSystem");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.Guid> OwnerId {
            get {
                return this.OwnerIdField;
            }
            set {
                if ((this.OwnerIdField.Equals(value) != true)) {
                    this.OwnerIdField = value;
                    this.RaisePropertyChanged("OwnerId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RAM {
            get {
                return this.RAMField;
            }
            set {
                if ((object.ReferenceEquals(this.RAMField, value) != true)) {
                    this.RAMField = value;
                    this.RaisePropertyChanged("RAM");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="User", Namespace="http://schemas.datacontract.org/2004/07/HostingManagmentSystem.Domain.Model")]
    [System.SerializableAttribute()]
    public partial class User : Web.HostingService.Entity {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PhoneField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SecretField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SurnameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Phone {
            get {
                return this.PhoneField;
            }
            set {
                if ((object.ReferenceEquals(this.PhoneField, value) != true)) {
                    this.PhoneField = value;
                    this.RaisePropertyChanged("Phone");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Secret {
            get {
                return this.SecretField;
            }
            set {
                if ((object.ReferenceEquals(this.SecretField, value) != true)) {
                    this.SecretField = value;
                    this.RaisePropertyChanged("Secret");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Surname {
            get {
                return this.SurnameField;
            }
            set {
                if ((object.ReferenceEquals(this.SurnameField, value) != true)) {
                    this.SurnameField = value;
                    this.RaisePropertyChanged("Surname");
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="HostingService.IHostingSystemService")]
    public interface IHostingSystemService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHostingSystemService/CreateUser", ReplyAction="http://tempuri.org/IHostingSystemService/CreateUserResponse")]
        bool CreateUser(Web.HostingService.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHostingSystemService/CreateUser", ReplyAction="http://tempuri.org/IHostingSystemService/CreateUserResponse")]
        System.Threading.Tasks.Task<bool> CreateUserAsync(Web.HostingService.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHostingSystemService/UpdateUser", ReplyAction="http://tempuri.org/IHostingSystemService/UpdateUserResponse")]
        bool UpdateUser(Web.HostingService.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHostingSystemService/UpdateUser", ReplyAction="http://tempuri.org/IHostingSystemService/UpdateUserResponse")]
        System.Threading.Tasks.Task<bool> UpdateUserAsync(Web.HostingService.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHostingSystemService/GetUsers", ReplyAction="http://tempuri.org/IHostingSystemService/GetUsersResponse")]
        Web.HostingService.User[] GetUsers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHostingSystemService/GetUsers", ReplyAction="http://tempuri.org/IHostingSystemService/GetUsersResponse")]
        System.Threading.Tasks.Task<Web.HostingService.User[]> GetUsersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHostingSystemService/GetUserById", ReplyAction="http://tempuri.org/IHostingSystemService/GetUserByIdResponse")]
        Web.HostingService.User GetUserById(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHostingSystemService/GetUserById", ReplyAction="http://tempuri.org/IHostingSystemService/GetUserByIdResponse")]
        System.Threading.Tasks.Task<Web.HostingService.User> GetUserByIdAsync(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHostingSystemService/CreateAdmin", ReplyAction="http://tempuri.org/IHostingSystemService/CreateAdminResponse")]
        bool CreateAdmin(Web.HostingService.Admin admin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHostingSystemService/CreateAdmin", ReplyAction="http://tempuri.org/IHostingSystemService/CreateAdminResponse")]
        System.Threading.Tasks.Task<bool> CreateAdminAsync(Web.HostingService.Admin admin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHostingSystemService/UpdateAdmin", ReplyAction="http://tempuri.org/IHostingSystemService/UpdateAdminResponse")]
        bool UpdateAdmin(Web.HostingService.Admin admin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHostingSystemService/UpdateAdmin", ReplyAction="http://tempuri.org/IHostingSystemService/UpdateAdminResponse")]
        System.Threading.Tasks.Task<bool> UpdateAdminAsync(Web.HostingService.Admin admin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHostingSystemService/GetAdmins", ReplyAction="http://tempuri.org/IHostingSystemService/GetAdminsResponse")]
        Web.HostingService.Admin[] GetAdmins();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHostingSystemService/GetAdmins", ReplyAction="http://tempuri.org/IHostingSystemService/GetAdminsResponse")]
        System.Threading.Tasks.Task<Web.HostingService.Admin[]> GetAdminsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHostingSystemService/GetAdminById", ReplyAction="http://tempuri.org/IHostingSystemService/GetAdminByIdResponse")]
        Web.HostingService.Admin GetAdminById(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHostingSystemService/GetAdminById", ReplyAction="http://tempuri.org/IHostingSystemService/GetAdminByIdResponse")]
        System.Threading.Tasks.Task<Web.HostingService.Admin> GetAdminByIdAsync(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHostingSystemService/CreateVps", ReplyAction="http://tempuri.org/IHostingSystemService/CreateVpsResponse")]
        bool CreateVps(Web.HostingService.VPS vps);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHostingSystemService/CreateVps", ReplyAction="http://tempuri.org/IHostingSystemService/CreateVpsResponse")]
        System.Threading.Tasks.Task<bool> CreateVpsAsync(Web.HostingService.VPS vps);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHostingSystemService/UpdateVps", ReplyAction="http://tempuri.org/IHostingSystemService/UpdateVpsResponse")]
        bool UpdateVps(Web.HostingService.VPS vps);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHostingSystemService/UpdateVps", ReplyAction="http://tempuri.org/IHostingSystemService/UpdateVpsResponse")]
        System.Threading.Tasks.Task<bool> UpdateVpsAsync(Web.HostingService.VPS vps);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHostingSystemService/GetVps", ReplyAction="http://tempuri.org/IHostingSystemService/GetVpsResponse")]
        Web.HostingService.VPS[] GetVps();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHostingSystemService/GetVps", ReplyAction="http://tempuri.org/IHostingSystemService/GetVpsResponse")]
        System.Threading.Tasks.Task<Web.HostingService.VPS[]> GetVpsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHostingSystemService/GetVpsById", ReplyAction="http://tempuri.org/IHostingSystemService/GetVpsByIdResponse")]
        Web.HostingService.VPS GetVpsById(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHostingSystemService/GetVpsById", ReplyAction="http://tempuri.org/IHostingSystemService/GetVpsByIdResponse")]
        System.Threading.Tasks.Task<Web.HostingService.VPS> GetVpsByIdAsync(System.Guid id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IHostingSystemServiceChannel : Web.HostingService.IHostingSystemService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class HostingSystemServiceClient : System.ServiceModel.ClientBase<Web.HostingService.IHostingSystemService>, Web.HostingService.IHostingSystemService {
        
        public HostingSystemServiceClient() {
        }
        
        public HostingSystemServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public HostingSystemServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public HostingSystemServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public HostingSystemServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool CreateUser(Web.HostingService.User user) {
            return base.Channel.CreateUser(user);
        }
        
        public System.Threading.Tasks.Task<bool> CreateUserAsync(Web.HostingService.User user) {
            return base.Channel.CreateUserAsync(user);
        }
        
        public bool UpdateUser(Web.HostingService.User user) {
            return base.Channel.UpdateUser(user);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateUserAsync(Web.HostingService.User user) {
            return base.Channel.UpdateUserAsync(user);
        }
        
        public Web.HostingService.User[] GetUsers() {
            return base.Channel.GetUsers();
        }
        
        public System.Threading.Tasks.Task<Web.HostingService.User[]> GetUsersAsync() {
            return base.Channel.GetUsersAsync();
        }
        
        public Web.HostingService.User GetUserById(System.Guid id) {
            return base.Channel.GetUserById(id);
        }
        
        public System.Threading.Tasks.Task<Web.HostingService.User> GetUserByIdAsync(System.Guid id) {
            return base.Channel.GetUserByIdAsync(id);
        }
        
        public bool CreateAdmin(Web.HostingService.Admin admin) {
            return base.Channel.CreateAdmin(admin);
        }
        
        public System.Threading.Tasks.Task<bool> CreateAdminAsync(Web.HostingService.Admin admin) {
            return base.Channel.CreateAdminAsync(admin);
        }
        
        public bool UpdateAdmin(Web.HostingService.Admin admin) {
            return base.Channel.UpdateAdmin(admin);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateAdminAsync(Web.HostingService.Admin admin) {
            return base.Channel.UpdateAdminAsync(admin);
        }
        
        public Web.HostingService.Admin[] GetAdmins() {
            return base.Channel.GetAdmins();
        }
        
        public System.Threading.Tasks.Task<Web.HostingService.Admin[]> GetAdminsAsync() {
            return base.Channel.GetAdminsAsync();
        }
        
        public Web.HostingService.Admin GetAdminById(System.Guid id) {
            return base.Channel.GetAdminById(id);
        }
        
        public System.Threading.Tasks.Task<Web.HostingService.Admin> GetAdminByIdAsync(System.Guid id) {
            return base.Channel.GetAdminByIdAsync(id);
        }
        
        public bool CreateVps(Web.HostingService.VPS vps) {
            return base.Channel.CreateVps(vps);
        }
        
        public System.Threading.Tasks.Task<bool> CreateVpsAsync(Web.HostingService.VPS vps) {
            return base.Channel.CreateVpsAsync(vps);
        }
        
        public bool UpdateVps(Web.HostingService.VPS vps) {
            return base.Channel.UpdateVps(vps);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateVpsAsync(Web.HostingService.VPS vps) {
            return base.Channel.UpdateVpsAsync(vps);
        }
        
        public Web.HostingService.VPS[] GetVps() {
            return base.Channel.GetVps();
        }
        
        public System.Threading.Tasks.Task<Web.HostingService.VPS[]> GetVpsAsync() {
            return base.Channel.GetVpsAsync();
        }
        
        public Web.HostingService.VPS GetVpsById(System.Guid id) {
            return base.Channel.GetVpsById(id);
        }
        
        public System.Threading.Tasks.Task<Web.HostingService.VPS> GetVpsByIdAsync(System.Guid id) {
            return base.Channel.GetVpsByIdAsync(id);
        }
    }
}
